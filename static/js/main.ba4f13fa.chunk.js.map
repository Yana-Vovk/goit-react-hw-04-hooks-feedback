{"version":3,"sources":["components/Feedback/FeedbackOptions.module.css","components/Cover/Cover.module.css","components/Feedback/FeedbackOptions.js","components/Statistics/Statistics.js","components/Cover/Cover.js","components/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Feedback","options","onLeaveFeedback","className","s","ulBtn","map","feedback","type","name","onClick","button","Statistics","good","neutral","bad","total","positivePercentage","Cover","title","children","section","Notification","message","App","useState","setGood","setNeutral","setBad","setTotal","useEffect","e","target","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6IACAA,EAAOC,QAAU,CAAC,OAAS,gCAAgC,MAAQ,iC,gBCAnED,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,uB,gKCe5CC,EAXE,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBACxB,OACI,oBAAIC,UAAWC,IAAEC,MAAjB,SACKJ,EAAQK,KAAI,SAAAC,GAAQ,OACjB,mCAAoB,wBAAQC,KAAK,SAASC,KAAMF,EAAUG,QAASR,EAAiBC,UAAWC,IAAEO,OAA7E,SAAsFJ,MAAjGA,SCKVK,EAZI,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,IAAKC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,mBAC5C,OACI,+BACI,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,W,gBCGGC,EATD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACpB,OACI,0BAASjB,UAAWC,IAAEiB,QAAtB,UACI,mBAAGlB,UAAWC,IAAEe,MAAhB,SAAwBA,IACvBC,MCEEE,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACI,8BACI,4BAAIA,OCED,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOZ,EAAP,KAAaa,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOX,EAAP,KAAgBa,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOV,EAAP,KAAYa,EAAZ,KACA,EAA0BH,oBAAU,GAApC,mBAAOT,EAAP,KAAca,EAAd,KAeAC,qBAAU,WAAQD,GAAS,SAAAb,GAAK,OAAIA,EAAQ,OAAO,CAACH,EAAMC,EAASC,IAMnE,OACE,gCACE,cAAC,EAAD,CACEI,MAAM,wBADR,SAEE,cAAC,EAAD,CACElB,QAbQ,CAAC,OAAO,UAAU,OAc1BC,gBAzBgB,SAAC6B,GACC,SAAlBA,EAAEC,OAAOvB,MACXiB,GAAQ,SAAAb,GAAI,OAAIA,EAAO,KAED,YAAlBkB,EAAEC,OAAOvB,MACRkB,GAAW,SAAAb,GAAO,OAAGA,EAAS,KAEb,QAAlBiB,EAAEC,OAAOvB,MACRmB,GAAO,SAAAb,GAAG,OAAGA,EAAK,UAmBzB,cAAC,EAAD,CACEI,MAAM,aADR,SAEGH,EAAQ,EACJ,cAAC,EAAD,CACDH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAnBDgB,KAAKC,MAAc,IAAPrB,EAAYG,KAoBtB,cAAC,EAAD,CAAcO,QAAQ,2BCjDnC,IAYeY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ba4f13fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3vONS\",\"ulBtn\":\"FeedbackOptions_ulBtn__cRsNR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Cover_section__3GImr\",\"title\":\"Cover_title__1JdnA\"};","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\n\r\nconst Feedback = ({options, onLeaveFeedback}) => {\r\n    return (\r\n        <ul className={s.ulBtn}>\r\n            {options.map(feedback => (\r\n                <li key={feedback}> <button type=\"button\" name={feedback} onClick={onLeaveFeedback} className={s.button}>{feedback}</button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Feedback;\r\n\r\nFeedback.propTypes = {\r\n    options: PropTypes.array,\r\n    onLeaveFeedback: PropTypes.func,\r\n}","import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({good, neutral, bad, total, positivePercentage}) => {\r\n    return (\r\n        <ul>\r\n            <li>Good: {good}</li>\r\n            <li>Neutral: {neutral}</li>\r\n            <li>Bad: {bad}</li>\r\n            <li>Total: {total}</li>\r\n            <li>Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.number,\r\n}","import PropTypes from 'prop-types';\r\nimport s from './Cover.module.css';\r\n\r\nconst Cover = ({ title, children }) => {\r\n    return (\r\n        <section className={s.section}>\r\n            <p className={s.title}>{title}</p>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Cover;\r\n\r\nCover.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n}","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n    return (\r\n        <div>\r\n            <p>{message}</p>\r\n        </div>);\r\n}\r\n\r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string,\r\n}","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Feedback from './components/Feedback/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Cover from './components/Cover/Cover';\nimport Notification from './components/Notification';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total, setTotal] = useState(-1);\n\n  const onLeaveFeedback = (e) => {\n      if (e.target.name === 'good') {\n        setGood(good => good + 1);\n        }\n        if (e.target.name === 'neutral') {\n             setNeutral(neutral=> neutral +1);\n         }\n        if (e.target.name === 'bad') {\n             setBad(bad=> bad +1);\n         }\n  }\n  const options = ['good','neutral','bad'];\n\n  useEffect(() => { setTotal(total => total + 1); }, [good, neutral, bad]); \n  \n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good * 100)/total);\n  }\n\n  return (\n    <div>\n      <Cover\n        title=\"Please leave feedback\">\n        <Feedback\n          options={options}\n          onLeaveFeedback={onLeaveFeedback} />\n      </Cover>\n      <Cover\n        title=\"Statistics\">\n        {total > 0\n          ? (<Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={countPositiveFeedbackPercentage()} />)\n          : (<Notification message=\"No feedback given\" />)\n        }\n      </Cover>\n    </div>\n  );\n}\n\n\n \n\n  \n\n \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}